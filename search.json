[{"title":"first post","url":"/2023/02/14/first-post/","content":"first posthello,world!\n","tags":["markdown"]},{"title":"Hello World","url":"/2023/12/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"hhh","url":"/2024/06/24/hhh/","content":"课程总目标\n了解 Arduino 的基本原理和使用方法。\n掌握使用 Arduino 进行数字系统设计的方法。\n提高动手能力和实践能力。\n培养团队协作精神。\n\n实验一、太空船控制器1. 实验目的设计并制作一个 70 年代科幻电影中出现的“太空飞船控制中心”。 制作一块有开关和灯的控制面板, 通过按下开关改变灯的状态。通过 Arduino 的代码配置输入管脚检测开关闭合状态，配置输出引脚输出高低电压。学习掌握 Arduino 数字接口的相关知识。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n开关\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n1\n\n\n3. 硬件电路及连接说明\n连接面包板和 Arduino 的 5V 和地。放置两个红色 LED 和一个绿色 LED 在面包板上。将每个 LED 的负极(短引线)通过 220 欧姆电阻器连接到地。连接绿色 LED 的阳极(长引线)到管脚 3。分别连接两个红色 LED 的阳极到管脚 4和 5。放置一个开关在面包板上。一端连接到电源，另一端连接到 Arduino 的数字管脚 2。在开关连接到 Arduino 的那个管脚上增加一个 10 K 欧姆的电阻到地。\n注意：连接 LED 灯时，要注意正负极。\n4. 实验原理Arduino 的数字管脚只能读取两种状态：有电压和没有电压 。这种类型的输入一般叫数字信号输入。有电压和没有电压一般使用 HIGH (高电平)和 LOW (低电平)来表示(有时也用真假，数字1和0来表示高电平和低电平)。 HIGH 代表“有电压”。 LOW 代表“没有电压”。当想让一个输出管脚输出 HIGH ，需要使用digitalWrite()这个函数。当运行后，这个数字管脚与地之间有 5 V 的电压（电位差）。当让一个输出管脚输出 LOW ，则会关闭输出。\nArduino 的数字式管脚既可以作为输入，也可以作为输出。可以在代码中根据函数来配置它们。当管脚是输出时，可以使用它打开像LED这样的器件。如果配置管脚作为输入，能检查开关是否被按下。因为管脚 0 和 1 已经被用来和计算机通信，最好从管脚2开始使用。\n5. 实验代码graph TD;    A[开始] --&gt; B[初始化引脚模式]    B --&gt; C[读取按键状态]    C --&gt; D&#123;按键被按下？&#125;    D -- 否 --&gt; E[绿色LED点亮]    E --&gt; F[红色LED1熄灭]    F --&gt; G[红色LED2熄灭]    G --&gt; C    D -- 是 --&gt; H[执行相关亮灭操作]    H --&gt; C\n\n\n\nint switchState = 0; // 定义并初始化一个整型变量 switchState，用于存储按键状态void setup() &#123;  // 设置引脚模式  pinMode(3, OUTPUT); // 将引脚3设置为输出模式，用于控制绿色LED  pinMode(4, OUTPUT); // 将引脚4设置为输出模式，用于控制红色LED  pinMode(5, OUTPUT); // 将引脚5设置为输出模式，用于控制红色LED  pinMode(2, INPUT);  // 将引脚2设置为输入模式，用于读取按键状态&#125;void loop() &#123;  // 读取按键状态  switchState = digitalRead(2); // 将引脚2的数字状态（按键状态）读取到 switchState 变量中  // 根据按键状态控制LED灯的亮灭  if (switchState == LOW) &#123; // 如果按键没有被按下    digitalWrite(3, HIGH); // 点亮绿色LED（引脚3）    digitalWrite(4, LOW);  // 熄灭红色LED（引脚4）    digitalWrite(5, LOW);  // 熄灭红色LED（引脚5）  &#125; else &#123; // 如果按键被按下    digitalWrite(3, LOW);   // 熄灭绿色LED（引脚3）    digitalWrite(4, LOW);   // 熄灭红色LED（引脚4）    digitalWrite(5, HIGH);  // 点亮红色LED（引脚5）    delay(250); // 延时四分之一秒    // 控制LED的闪烁    digitalWrite(4, HIGH);  // 点亮红色LED（引脚4）    digitalWrite(5, LOW);   // 熄灭红色LED（引脚5）    delay(250); // 延时四分之一秒  &#125;&#125;//返回loop函数开始位置\n\n6. 实验结果\n实验二、爱情传感器1. 实验目的当遇见女神&#x2F;男神心跳加速，体温上升；测量你手指的温度，按照高于环境温度的程度依次亮起 LED 灯；了解测温传感器 TMP36 （温度传感器的输出电压按照摄氏温度的一定比例变化）；学习掌握 Arduino 实现 A&#x2F;D 转换的知识。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n温度传感器 TMP36\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n3. 硬件电路及连接说明\n将每个LED的负极(短引线)通过一个220欧姆的电阻器连接到地。分别连接LED的阳极到管脚2至4，其在工程中充当指示器。将 TMP36 放置在面包板上，保持圆形那面背对Arduino，如图 2所示。连接平面那边的左侧引线到电源，右侧引线到地。连接中间的引线到 Arduino 的 A0 管脚。这是模拟输入管脚 0 。\n注意：LED 灯的正负极、TMP36 的引脚对应位置。\n4. 实验原理即使Arduino是一个数字工具，它也能够从模拟传感器获取例如温度或光照强度等测量信息。要实现这一点，我们需要使用Arduino内置的模数转换器（ADC）。模拟引脚 A0 至 A5 能够提供0至1023范围内的数值，这些数值可以对应映射到0伏至5伏的电压范围内。\n我们将使用一个温度传感器来测量皮肤的温度。这种传感器会根据检测到的温度变化输出不同的电压值。它具有三个引脚：一个连接到地线，另一个连接到电源，第三个则输出一个变化的电压至 Arduino 。在这个项目中，我们将读取传感器的输出电压，并利用这个电压来控制 LED 的亮灭，以此表示温度的变化。市面上有多种类型的温度传感器，其中 TMP36 因其输出电压与摄氏度温度成正比的特性而非常方便使用。\nArduino IDE内置了一个名为串口监视器的工具，它允许我们从微控制器接收反馈信息。通过串口监视器，我们可以获取传感器状态的实时信息，并了解在代码运行过程中电路的工作情况。\n5. 实验代码%%&#123;init: &#123;&#x27;theme&#x27;:&#x27;forest&#x27;&#125;&#125;%%graph TD;    A[开始] --&gt; B[初始化串口通信]    B --&gt; C[设置引脚2到引脚4为输出并置为低电平]    C --&gt; D[读取、打印传感器值]    D --&gt; E[转换传感器值为电压值并打印]    E --&gt; F[转换电压值为温度值并打印]    F --&gt; J&#123;温度 &lt; 20℃？&#125;    J -- 是 --&gt; K[熄灭所有LED]    K --&gt; D    J -- 否 --&gt; L&#123;温度 &gt;= 22℃ 且 &lt; 24℃？&#125;    L -- 是 --&gt; M[点亮LED1、熄灭LED2和LED3]    M --&gt; D    L -- 否 --&gt; O&#123;温度 &gt;= 24℃ 且 &lt; 26℃？&#125;    O -- 是 --&gt; P[点亮LED1和LED2、熄灭LED3]    P --&gt; D    O -- 否 --&gt; R&#123;温度 &gt;= 26℃？&#125;    R -- 是 --&gt; S[点亮所有LED]    S --&gt; D    R -- 否 --&gt; D\n\n\n\n\n\nconst int sensorPin = A0;  // 定义传感器连接的引脚为A0const float baselineTemp = 20.0;  // 定义基准温度为20.0摄氏度void setup() &#123;  Serial.begin(9600);  // 初始化串口通信，波特率为9600  for (int pinNumber = 2; pinNumber &lt; 5; pinNumber++) &#123;  // 循环设置引脚2到引脚4为输出，并置为低电平    pinMode(pinNumber, OUTPUT);    digitalWrite(pinNumber, LOW);  &#125;&#125;// loop函数会一直循环执行void loop() &#123;  int sensorVal = analogRead(sensorPin);  // 读取传感器的值  Serial.print(&quot;Sensor Value:&quot;);  // 打印文本  Serial.print(sensorVal);  // 打印传感器的值  float voltage = (sensorVal / 1024.0) * 5.0;  // 将传感器值转换为电压值  Serial.print(&quot;, Volts:&quot;);  // 打印文本  Serial.print(voltage);  // 打印电压值  Serial.print(&quot;, degrees c:&quot;);  // 打印文本  // 将电压值转换为以摄氏度为单位的温度值  float temperature = (voltage-0.5) * 100;  Serial.println(temperature);  // 打印温度值并换行  // 根据温度值控制LED的状态，温度每升高2度，就多亮1个LED灯（温度区间左闭右开）  if (temperature &lt; baselineTemp) &#123;  // 如果温度低于基准温度（＜20℃）    digitalWrite(2, LOW);  // 将引脚2置为低电平，灯灭    digitalWrite(3, LOW);  // 将引脚3置为低电平，灯灭    digitalWrite(4, LOW);  // 将引脚4置为低电平，灯灭  &#125; else if (temperature &gt;= baselineTemp + 2 &amp;&amp; temperature &lt; baselineTemp + 4) &#123;  // 如果温度在基准温度加2到基准温度加4之间（22~24℃）    digitalWrite(2, HIGH);  // 将引脚2置为高电平，灯亮    digitalWrite(3, LOW);   // 将引脚3置为低电平，灯灭    digitalWrite(4, LOW);   // 将引脚4置为低电平，灯灭  &#125; else if (temperature &gt;= baselineTemp + 4 &amp;&amp; temperature &lt; baselineTemp + 6) &#123;  // 如果温度在基准温度加4到基准温度加6之间（24~26℃）    digitalWrite(2, HIGH);  // 将引脚2置为高电平，灯亮    digitalWrite(3, HIGH);  // 将引脚3置为高电平，灯亮    digitalWrite(4, LOW);   // 将引脚4置为低电平，灯灭  &#125; else if (temperature &gt;= baselineTemp + 6) &#123;  // 如果温度高于基准温度加6（＞26℃）    digitalWrite(2, HIGH);  // 将引脚2置为高电平，灯亮    digitalWrite(3, HIGH);  // 将引脚3置为高电平，灯亮    digitalWrite(4, HIGH);  // 将引脚4置为高电平，灯亮  &#125;  delay(1);  // 延时1毫秒&#125;\n\n6. 实验结果\n实验三、混色灯1. 实验目的测量红绿蓝三原色的亮度值；根据测量得出的亮度值来改变红绿蓝 LED 的亮度。了解混色光敏电阻-光线传感器、RGB 三色 LED 管；通过改变电压的高低，实现 LED 亮度的改变；学习了解  PWM  ，即脉冲宽度调制。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n4 引线 LED（RGB）\n1\n\n\n光敏电阻\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n3\n\n\n3. 硬件电路及连接说明\n在面包板上布置三个光敏电阻，确保它们的两个引脚分别位于面包板的两侧，如图所示。将光敏电阻的一个引脚连接到电源，另一个引脚通过一个10千欧姆的电阻连接到地。这个电阻与光敏电阻串联，它们共同构成一个分压器。根据欧姆定律，连接点的电压会按照它们电阻的比例进行分配。当光敏电阻表面受到的光照发生变化时，其电阻值也会随之变化，进而导致连接点的电压发生变化。将光敏电阻与电阻同一侧的引脚通过导线连接到模拟引脚 0、1和2 。\n分别用三种颜色的塑料片覆盖在光敏电阻的表面。将红色塑料片覆盖在连接到A0引脚的光敏电阻上，绿色塑料片覆盖在连接到A1引脚的光敏电阻上，蓝色塑料片覆盖在连接到A2引脚的光敏电阻上。每种塑料片只允许与其颜色相对应的特定波长的光线通过，例如红色塑料片只允许红光通过，绿色塑料片只允许绿光通过，蓝色塑料片只允许蓝光通过。这样就可以检测出照射在传感器上的光的组成。\n注意：将 LED 最长的引线插入面包板并连接到地，将另外三条引线分别通过220欧姆的电阻对应接到数字引脚9、10和11。\n4. 实验原理Arduino不能改变输出管脚的电压，它只能输出 5V。 因此我们将需要使用一个称为脉冲宽度调制( PWM )的技术来改变LED的亮度。PWM 在一个固定的周期内快速地改变输出管脚的高低电平，其改变速度比人眼所能观察到的要快得多。它和电影工作的原理是相似的，即利用快速变化的静止图片来创造运动的错觉。\n迅速地改变管脚的电平可以实现我们改变输出电压的目的，进而调整 LED 的亮度。在一个周期中管脚电压高电平的时间所占的比例被称为占空比。Arduino Uno 有6个管脚可以被用来作为 PWM (数字管脚3,5,6,9,10和17)。在这个项目中，我们将使用光敏电阻(一种根据照射到它们表面的光强度来改变自身电阻的传感器)作为输入。如果我们将光敏电阻的一端连接到 Arduino 上，我们将可以通过检查管脚上的电压值来测试光敏电阻的阻值变化。\n该实验中所使用的 4引线 LED 具有4条引线，是一个共阴极 RGB LED。它内部包含独立的红色、绿色和蓝色发光元件，以及一个共用的地线（负极）。通过调整 Arduino 的 PWM （脉冲宽度调制）引脚（通过220欧姆的电阻接到阳极）与阴极之间的电压，可以控制LED三种颜色光线的亮度。\n5. 实验代码graph TD;    A[开始] --&gt; B[初始化串行通信]    B --&gt; C[设置LED引脚为输出模式]    C --&gt; D[读取红绿蓝三个传感器的值]    D --&gt; I[输出原始传感器数值]    I --&gt; J[将传感器值缩小四倍]    J --&gt; L[输出映射后的传感器值，设置LED亮度]    L --&gt; D\n\n\n\n//定义引脚变量，光敏电阻上放对应颜色的塑料片来充当传感器const int greenLEDPin = 9;  // 绿色LED的数字引脚const int redLEDPin = 11;   // 红色LED的数字引脚const int blueLEDPin = 10;  // 蓝色LED的数字引脚const int redSensorPin = A0;  // 红色光线传感器的模拟引脚const int greenSensorPin = A1;  // 绿色光线传感器的模拟引脚const int blueSensorPin = A2;  // 蓝色光线传感器的模拟引脚//电压值变量int redValue = 0;  // 存储红色值的变量int greenValue = 0;  // 存储绿色值的变量int blueValue = 0;  // 存储蓝色值的变量int redSensorValue = 0;  // 存储红色光线传感器读数的变量int greenSensorValue = 0;  // 存储绿色光线传感器读数的变量int blueSensorValue = 0;  // 存储蓝色光线传感器读数的变量void setup() &#123;  Serial.begin(9600);  // 初始化串行通信，设置波特率为9600  pinMode(greenLEDPin, OUTPUT);  // 设置绿色LED引脚为输出模式  pinMode(redLEDPin, OUTPUT);    // 设置红色LED引脚为输出模式  pinMode(blueLEDPin, OUTPUT);   // 设置蓝色LED引脚为输出模式&#125;// 主循环，会一直运行void loop() &#123;  redSensorValue = analogRead(redSensorPin);  // 读取红色光线传感器值  delay(5);  // 延迟5毫秒  greenSensorValue = analogRead(greenSensorPin);  // 读取绿色光线传感器值  delay(5);  // 延迟5毫秒  blueSensorValue = analogRead(blueSensorPin);  // 读取蓝色光线传感器值  Serial.print(&quot;Raw Sensor Values \\t Red:&quot;);  // 输出原始传感器数值，红色部分  Serial.print(redSensorValue);  // 输出红色光线传感器数值  Serial.print(&quot;\\t Green:&quot;);  // 输出原始传感器数值，绿色部分  Serial.print(greenSensorValue);  // 输出绿色光线传感器数值  Serial.print(&quot;\\t Blue:&quot;);  // 输出原始传感器数值，蓝色部分  Serial.println(blueSensorValue);  // 输出蓝色光线传感器数值并换行    redValue = redSensorValue / 4;  // 将红色光线传感器值缩小四倍  greenValue = greenSensorValue / 4;  // 将绿色光线传感器值缩小四倍  blueValue = blueSensorValue / 4;  // 将蓝色光线传感器值缩小四倍  //打印新的映射值（即上面缩小后所得的值）  Serial.print(&quot;Mapped Sensor Values \\t Red:&quot;);  // 输出映射后的光线传感器数值，红色部分  Serial.print(redValue);  // 输出映射后的红色数值  Serial.print(&quot;\\t Green:&quot;);  // 输出映射后的光线传感器数值，绿色部分  Serial.print(greenValue);  // 输出映射后的绿色数值  Serial.print(&quot;\\t Blue:&quot;);  // 输出映射后的光线传感器数值，蓝色部分  Serial.println(blueValue);  // 输出映射后的蓝色数值并换行  //设置LED光线亮度  analogWrite(redLEDPin, redValue);  // 控制红色LED亮度  analogWrite(greenLEDPin, greenValue);  // 控制绿色LED亮度  analogWrite(blueLEDPin, blueValue);  // 控制蓝色LED亮度&#125;\n\n6. 实验结果\n实验四、心情指示器1. 实验目的根据可变电位器的值来改变舵机的旋转角度；了解一种分压器件：可变电位器；掌握 Arduino 实现舵机控制的方法。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n100µf 电容器\n2\n\n\n可变电位器\n1\n\n\n舵机\n1\n\n\n3. 硬件电路及连接说明\n将 Arduino 的5V和地（GND）连接到面包板的一侧。在面包板上放置一个可变电位器，并将电位器的一个引脚连接到5V，另一个引脚连接到地（GND）。\n舵机具有三根引线：一根是电源线（通常为红色），一根是地线（通常为黑色），第三根是控制线（通常为白色），它将接收来自Arduino的控制信号。将三个公端排针插入舵机线路的母端（参考图3），并将这些排针连接到面包板上，确保每个引脚位于不同的行。将 5V 连接到红色导线，地连接到黑色导线，同时将白色导线连接到数字引脚9。\n当舵机启动时，它会比正常运行时消耗更多的电流，这可能导致板子上的电压下降。为了使可能发生的所有电压波动更加平稳，可以在公端排针右侧的电源和地之间并联一个100μF电容器（如图1所示）。同样，我们也可以在电位器的电源和地之间并联一个电容器。这些电容器用于减少或分离其他电路造成的波动，因此被称为去耦电容。\n注意：连接电容时，要注意正负极，否则可能会爆炸。\n4. 实验原理舵机是一种特殊的马达，不是整周旋转，而是移动到一个具体位置并且固定那里，直到其再次接收到移动的指令。舵机通常只转动 180 度（半圈）。电位器是一种分压器，当转动其旋钮时，可以改变中间引脚上的电压比例，从而经过映射，能够调整模拟信号输入引脚0的电压。利用这个原理，可以实现对于舵机位置的控制。\n在制作彩色混合灯时，我们可以通过对发光二极管（LED）进行脉冲宽度调制（PWM）来控制其亮度。同样，舵机也需要接收脉冲信号来指示它们应该转动到哪个角度。这些脉冲信号以固定的间隔发送，但其宽度会在1000微秒到2000微秒之间变化。\n我们可以编写代码来生成这些脉冲，而且 Arduino 软件提供了 Servo 库，使得控制舵机变得更加简单。由于舵机的转动范围限制在180度，而模拟信号的输入范围是0到1023，因此我们需要使用一个名为map()的函数来调整从电位器读取的值，以适应这个范围。\n5. 实验代码#include &lt;Servo.h&gt; // 导入 Servo 库，用于控制舵机Servo myServo; // 创建 Servo 库的对象 myServoint const potPin = A0; // 声明并初始化常量 potPin，用于存储模拟输入的引脚 A0int potVal; // 声明变量 potVal，用于存储模拟输入的数值int angle; // 声明变量 angle，用于存储舵机的角度void setup()&#123;  myServo.attach(9); // 将舵机连接到数字引脚 9  Serial.begin(9600); // 初始化串行通信，波特率为 9600&#125;//在loop()函数中，读取模拟信号输入值并且把它打印到串口监视器。void loop()&#123;  potVal = analogRead(potPin); // 读取模拟输入引脚 A0 的数值，并存储到变量 potVal 中  Serial.print(&quot;potVal:&quot;); // 输出字符 &quot;potVal:&quot;  Serial.print(potVal); // 输出变量 potVal 的值  angle = map(potVal, 0, 1023, 0, 179); // 将 potVal 的值从范围 [0, 1023] 按比例映射到 [0, 179]，并存储到变量 angle 中  Serial.print(&quot;,angle:&quot;); // 输出字符 &quot;,angle:&quot;  Serial.println(angle); // 输出变量 angle 的值，并换行  myServo.write(angle); // 将舵机转到角度 angle  delay(15); // 延迟 15 毫秒&#125;\n\n6. 实验结果\n\n\n实验五、电动纸风车1. 实验目的设计并制作一个 70 年代科幻电影中出现的“太空飞船控制中心”。 制作一块有开关和灯的控制面板, 通过按下开关改变灯的状态。通过 Arduino 的代码配置输入管脚检测开关闭合状态，配置输出引脚输出高低电压。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n开关\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n1\n\n\n3. 硬件电路及连接说明\n连接面包板和 Arduino 的 5V 和地。放置两个红色 LED 和一个绿色 LED 在面包板上。将每个 LED 的负极(短引线)通过 220 欧姆电阻器连接到地。连接绿色 LED 的阳极(长引线)到管脚 3。分别连接两个红色 LED 的阳极到管脚 4和 5。放置一个开关在面包板上。一端连接到电源，另一端连接到 Arduino 的数字管脚 2。在开关连接到 Arduino 的那个管脚上增加一个 10 K 欧姆的电阻到地。\n注意：连接 LED 灯时，要注意正负极。\n4. 实验原理Arduino 的数字管脚只能读取两种状态：有电压和没有电压 。这种类型的输入一般叫数字信号输入。有电压和没有电压一般使用 HIGH (高电平)和 LOW (低电平)来表示(有时也用真假，数字1和0来表示高电平和低电平)。 HIGH 代表“有电压”。 LOW 代表“没有电压”。当想让一个输出管脚输出 HIGH ，需要使用digitalWrite()这个函数。当运行后，这个数字管脚与地之间有 5 V 的电压（电位差）。当让一个输出管脚输出 LOW ，则会关闭输出。\nArduino 的数字式管脚既可以作为输入，也可以作为输出。可以在代码中根据函数来配置它们。当管脚是输出时，可以使用它打开像LED这样的器件。如果配置管脚作为输入，能检查开关是否被按下。因为管脚 0 和 1 已经被用来和计算机通信，最好从管脚2开始使用。\n5. 实验代码int switchState = 0; // 定义并初始化一个整型变量 switchState，用于存储按键状态void setup() &#123;  // 设置引脚模式  pinMode(3, OUTPUT); // 将引脚3设置为输出模式，用于控制绿色LED  pinMode(4, OUTPUT); // 将引脚4设置为输出模式，用于控制红色LED  pinMode(5, OUTPUT); // 将引脚5设置为输出模式，用于控制红色LED  pinMode(2, INPUT);  // 将引脚2设置为输入模式，用于读取按键状态&#125;void loop() &#123;  // 读取按键状态  switchState = digitalRead(2); // 将引脚2的数字状态（按键状态）读取到 switchState 变量中  // 根据按键状态控制LED灯的亮灭  if (switchState == LOW) &#123; // 如果按键没有被按下    digitalWrite(3, HIGH); // 点亮绿色LED（引脚3）    digitalWrite(4, LOW);  // 熄灭红色LED（引脚4）    digitalWrite(5, LOW);  // 熄灭红色LED（引脚5）  &#125; else &#123; // 如果按键被按下    digitalWrite(3, LOW);   // 熄灭绿色LED（引脚3）    digitalWrite(4, LOW);   // 熄灭红色LED（引脚4）    digitalWrite(5, HIGH);  // 点亮红色LED（引脚5）    delay(250); // 延时四分之一秒    // 控制LED的闪烁    digitalWrite(4, HIGH);  // 点亮红色LED（引脚4）    digitalWrite(5, LOW);   // 熄灭红色LED（引脚5）    delay(250); // 延时四分之一秒  &#125;&#125;//返回loop函数开始位置\n\n6. 实验结果实验六、太空船控制器1. 实验目的设计并制作一个 70 年代科幻电影中出现的“太空飞船控制中心”。 制作一块有开关和灯的控制面板, 通过按下开关改变灯的状态。通过 Arduino 的代码配置输入管脚检测开关闭合状态，配置输出引脚输出高低电压。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n开关\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n1\n\n\n3. 硬件电路及连接说明\n连接面包板和 Arduino 的 5V 和地。放置两个红色 LED 和一个绿色 LED 在面包板上。将每个 LED 的负极(短引线)通过 220 欧姆电阻器连接到地。连接绿色 LED 的阳极(长引线)到管脚 3。分别连接两个红色 LED 的阳极到管脚 4和 5。放置一个开关在面包板上。一端连接到电源，另一端连接到 Arduino 的数字管脚 2。在开关连接到 Arduino 的那个管脚上增加一个 10 K 欧姆的电阻到地。\n注意：连接 LED 灯时，要注意正负极。\n4. 实验原理Arduino 的数字管脚只能读取两种状态：有电压和没有电压 。这种类型的输入一般叫数字信号输入。有电压和没有电压一般使用 HIGH (高电平)和 LOW (低电平)来表示(有时也用真假，数字1和0来表示高电平和低电平)。 HIGH 代表“有电压”。 LOW 代表“没有电压”。当想让一个输出管脚输出 HIGH ，需要使用digitalWrite()这个函数。当运行后，这个数字管脚与地之间有 5 V 的电压（电位差）。当让一个输出管脚输出 LOW ，则会关闭输出。\nArduino 的数字式管脚既可以作为输入，也可以作为输出。可以在代码中根据函数来配置它们。当管脚是输出时，可以使用它打开像LED这样的器件。如果配置管脚作为输入，能检查开关是否被按下。因为管脚 0 和 1 已经被用来和计算机通信，最好从管脚2开始使用。\n5. 实验代码int switchState = 0; // 定义并初始化一个整型变量 switchState，用于存储按键状态void setup() &#123;  // 设置引脚模式  pinMode(3, OUTPUT); // 将引脚3设置为输出模式，用于控制绿色LED  pinMode(4, OUTPUT); // 将引脚4设置为输出模式，用于控制红色LED  pinMode(5, OUTPUT); // 将引脚5设置为输出模式，用于控制红色LED  pinMode(2, INPUT);  // 将引脚2设置为输入模式，用于读取按键状态&#125;void loop() &#123;  // 读取按键状态  switchState = digitalRead(2); // 将引脚2的数字状态（按键状态）读取到 switchState 变量中  // 根据按键状态控制LED灯的亮灭  if (switchState == LOW) &#123; // 如果按键没有被按下    digitalWrite(3, HIGH); // 点亮绿色LED（引脚3）    digitalWrite(4, LOW);  // 熄灭红色LED（引脚4）    digitalWrite(5, LOW);  // 熄灭红色LED（引脚5）  &#125; else &#123; // 如果按键被按下    digitalWrite(3, LOW);   // 熄灭绿色LED（引脚3）    digitalWrite(4, LOW);   // 熄灭红色LED（引脚4）    digitalWrite(5, HIGH);  // 点亮红色LED（引脚5）    delay(250); // 延时四分之一秒    // 控制LED的闪烁    digitalWrite(4, HIGH);  // 点亮红色LED（引脚4）    digitalWrite(5, LOW);   // 熄灭红色LED（引脚5）    delay(250); // 延时四分之一秒  &#125;&#125;//返回loop函数开始位置\n\n6. 实验结果实验七、太空船控制器1. 实验目的设计并制作一个 70 年代科幻电影中出现的“太空飞船控制中心”。 制作一块有开关和灯的控制面板, 通过按下开关改变灯的状态。通过 Arduino 的代码配置输入管脚检测开关闭合状态，配置输出引脚输出高低电压。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n开关\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n1\n\n\n3. 硬件电路及连接说明\n连接面包板和 Arduino 的 5V 和地。放置两个红色 LED 和一个绿色 LED 在面包板上。将每个 LED 的负极(短引线)通过 220 欧姆电阻器连接到地。连接绿色 LED 的阳极(长引线)到管脚 3。分别连接两个红色 LED 的阳极到管脚 4和 5。放置一个开关在面包板上。一端连接到电源，另一端连接到 Arduino 的数字管脚 2。在开关连接到 Arduino 的那个管脚上增加一个 10 K 欧姆的电阻到地。\n注意：连接 LED 灯时，要注意正负极。\n4. 实验原理Arduino 的数字管脚只能读取两种状态：有电压和没有电压 。这种类型的输入一般叫数字信号输入。有电压和没有电压一般使用 HIGH (高电平)和 LOW (低电平)来表示(有时也用真假，数字1和0来表示高电平和低电平)。 HIGH 代表“有电压”。 LOW 代表“没有电压”。当想让一个输出管脚输出 HIGH ，需要使用digitalWrite()这个函数。当运行后，这个数字管脚与地之间有 5 V 的电压（电位差）。当让一个输出管脚输出 LOW ，则会关闭输出。\nArduino 的数字式管脚既可以作为输入，也可以作为输出。可以在代码中根据函数来配置它们。当管脚是输出时，可以使用它打开像LED这样的器件。如果配置管脚作为输入，能检查开关是否被按下。因为管脚 0 和 1 已经被用来和计算机通信，最好从管脚2开始使用。\n5. 实验代码int switchState = 0; // 定义并初始化一个整型变量 switchState，用于存储按键状态void setup() &#123;  // 设置引脚模式  pinMode(3, OUTPUT); // 将引脚3设置为输出模式，用于控制绿色LED  pinMode(4, OUTPUT); // 将引脚4设置为输出模式，用于控制红色LED  pinMode(5, OUTPUT); // 将引脚5设置为输出模式，用于控制红色LED  pinMode(2, INPUT);  // 将引脚2设置为输入模式，用于读取按键状态&#125;void loop() &#123;  // 读取按键状态  switchState = digitalRead(2); // 将引脚2的数字状态（按键状态）读取到 switchState 变量中  // 根据按键状态控制LED灯的亮灭  if (switchState == LOW) &#123; // 如果按键没有被按下    digitalWrite(3, HIGH); // 点亮绿色LED（引脚3）    digitalWrite(4, LOW);  // 熄灭红色LED（引脚4）    digitalWrite(5, LOW);  // 熄灭红色LED（引脚5）  &#125; else &#123; // 如果按键被按下    digitalWrite(3, LOW);   // 熄灭绿色LED（引脚3）    digitalWrite(4, LOW);   // 熄灭红色LED（引脚4）    digitalWrite(5, HIGH);  // 点亮红色LED（引脚5）    delay(250); // 延时四分之一秒    // 控制LED的闪烁    digitalWrite(4, HIGH);  // 点亮红色LED（引脚4）    digitalWrite(5, LOW);   // 熄灭红色LED（引脚5）    delay(250); // 延时四分之一秒  &#125;&#125;//返回loop函数开始位置\n\n6. 实验结果实验八、太空船控制器1. 实验目的设计并制作一个 70 年代科幻电影中出现的“太空飞船控制中心”。 制作一块有开关和灯的控制面板, 通过按下开关改变灯的状态。通过 Arduino 的代码配置输入管脚检测开关闭合状态，配置输出引脚输出高低电压。\n2. 实验器材\n\n\n实验材料名称\n数量\n\n\n\nArduino UNO\n1\n\n\n面包板\n1\n\n\n开关\n1\n\n\nLED 灯\n3\n\n\n220$\\ohm$ 电阻\n3\n\n\n10 $k\\ohm$ 电阻\n1\n\n\n3. 硬件电路及连接说明\n连接面包板和 Arduino 的 5V 和地。放置两个红色 LED 和一个绿色 LED 在面包板上。将每个 LED 的负极(短引线)通过 220 欧姆电阻器连接到地。连接绿色 LED 的阳极(长引线)到管脚 3。分别连接两个红色 LED 的阳极到管脚 4和 5。放置一个开关在面包板上。一端连接到电源，另一端连接到 Arduino 的数字管脚 2。在开关连接到 Arduino 的那个管脚上增加一个 10 K 欧姆的电阻到地。\n注意：连接 LED 灯时，要注意正负极。\n4. 实验原理Arduino 的数字管脚只能读取两种状态：有电压和没有电压 。这种类型的输入一般叫数字信号输入。有电压和没有电压一般使用 HIGH (高电平)和 LOW (低电平)来表示(有时也用真假，数字1和0来表示高电平和低电平)。 HIGH 代表“有电压”。 LOW 代表“没有电压”。当想让一个输出管脚输出 HIGH ，需要使用digitalWrite()这个函数。当运行后，这个数字管脚与地之间有 5 V 的电压（电位差）。当让一个输出管脚输出 LOW ，则会关闭输出。\nArduino 的数字式管脚既可以作为输入，也可以作为输出。可以在代码中根据函数来配置它们。当管脚是输出时，可以使用它打开像LED这样的器件。如果配置管脚作为输入，能检查开关是否被按下。因为管脚 0 和 1 已经被用来和计算机通信，最好从管脚2开始使用。\n5. 实验代码int switchState = 0; // 定义并初始化一个整型变量 switchState，用于存储按键状态void setup() &#123;  // 设置引脚模式  pinMode(3, OUTPUT); // 将引脚3设置为输出模式，用于控制绿色LED  pinMode(4, OUTPUT); // 将引脚4设置为输出模式，用于控制红色LED  pinMode(5, OUTPUT); // 将引脚5设置为输出模式，用于控制红色LED  pinMode(2, INPUT);  // 将引脚2设置为输入模式，用于读取按键状态&#125;void loop() &#123;  // 读取按键状态  switchState = digitalRead(2); // 将引脚2的数字状态（按键状态）读取到 switchState 变量中  // 根据按键状态控制LED灯的亮灭  if (switchState == LOW) &#123; // 如果按键没有被按下    digitalWrite(3, HIGH); // 点亮绿色LED（引脚3）    digitalWrite(4, LOW);  // 熄灭红色LED（引脚4）    digitalWrite(5, LOW);  // 熄灭红色LED（引脚5）  &#125; else &#123; // 如果按键被按下    digitalWrite(3, LOW);   // 熄灭绿色LED（引脚3）    digitalWrite(4, LOW);   // 熄灭红色LED（引脚4）    digitalWrite(5, HIGH);  // 点亮红色LED（引脚5）    delay(250); // 延时四分之一秒    // 控制LED的闪烁    digitalWrite(4, HIGH);  // 点亮红色LED（引脚4）    digitalWrite(5, LOW);   // 熄灭红色LED（引脚5）    delay(250); // 延时四分之一秒  &#125;&#125;//返回loop函数开始位置\n\n6. 实验结果"},{"title":"搭建博客","url":"/2023/02/15/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-1/","content":"从今年1月份开始折腾，前后折腾了很多东西，但也学到了很多，今天暂且告一段落，转向课程复习！\n欢迎大家访问，与我交流、互相学习！\n","tags":["Hexo","keep"]},{"title":"搭建博客成功","url":"/2023/02/15/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%88%90%E5%8A%9F-1/","content":"今天终于把个人博客搭建起来了，碰见了许多问题。\n主题一开始用的是 B站up主 @湾区书记汤姆 的 这个视频 。\n由于这位博主介绍的内容较为入门，没有进行美化，所以转而使用了 Ayer主题 ，该主题简洁美观，但由于本人技术不够到位，配置主题时有些吃力，遂转用网络上教程较多而很符合本人审美的 keep主题。\n评论区配置在配置评论区功能时，我在 valine、utterances 与 gitalk 之间徘徊不定：\n\nvaline 的配置方便，但需要注册 Leancloud 。\nutterances 和GitHub类似，需要挂梯子加载。\ngitalk 不知道为什么授权登录之后会报网络错误，搜索后无有效解。\n\n最后选择了 valine ，详细的比较可以阅读后面推荐的 第二篇文。\n结语搭建博客是一次巨大挑战，遇见了很多bug。在当下，善用网络资源是”生存必备技能“。\n给大家推荐几篇对我帮助较大的文章，搭配 hexo官方文档 使用会事半功倍。\n\n搭建博客1，搭建博客2，搭建博客3\n\n评论系统比较\n\nhexo + keep主题配置与优化1，hexo + keep主题配置与优化2   ⭐⭐\n\n\n","tags":["Hexo","美化","keep主题"]},{"title":"最近一些想写的","url":"/2023/06/03/%E6%9C%80%E8%BF%91%E4%B8%80%E4%BA%9B%E6%83%B3%E5%86%99%E7%9A%84/","content":"前言这学期来了之后一直没有更新自己的Blog，觉得很愧疚。正好昨天去西电参加外场活动，在路上又有一些感想。今天在这里写一些杂七杂八的东西。\n高考与大学马上我的下一届学弟学妹们就要踏进高考的考场了。说实话，感觉大学这将近一年过的挺快的。主要原因还是在于忙的事情太多，到头来把自己弄得晕头转向。我在这里还是想讲一讲我上大学以来的一些经验和体会，以飨学弟学妹，也算是对大一这一年的一些小的回顾与记录吧。\n首先，大一这一年我还是自认为不算虚度的。这是作为大学生应该有的一种素质：对自我成就的清晰认知。你要知道自己干了点什么，不要回顾自己的生活，发现好像打游戏上分，赢一把输一把，而你还没有收获快乐，那不是白白浪费了时间和精力吗？所以，要知道自己应该做出什么来，已经做到了哪些事情。关于这一点，我自己还是应当注意：把事情坚持下来，做出成果。\n其次，关于心理落差。我本人其实觉得西工大不是一个严格意义上的大学。最起码与我对大学的想象有差距。同时，你可能会发现在你身边的人的能力比你超出一大截去，这时候很多人会感到巨大的挫败感与失落感，归根结底还是没有弄清楚自己的“To-Do List”，没有自己的规划。所以还是希望大家在高考结束后就开始了解学习相关的生涯规划信息，以便你在将来的学习与生活中有一个明晰的道路选择。\n另外，我希望大家——当然也是我所需要做的——培养出做出合理的计划并执行的能力，也就是生活的能力。学会生活，具备这种能力，你就不会感到碌碌无为，不会出现忙了半天也不知道在忙什么的现象与心理感受。如此下去，你的整个人生——在我想来——应该是会更加幸福的。\n最后，最重要的是，你需要接受自己的平凡，并能够一直在平凡中寻求进步，即你需要有“不甘平凡”的品格。你要知道，绝大多数人都是平凡人。同时随着阶级固化，普通人实现阶级跃迁的机会更加的少，所以我们现在的短期奋斗目标是“尽力实现阶层的提升，提高自己与后代的生活水平”，而远大的理想则是“使整个阶级的地位有所提高，甚至实现我们所说的social-revolution”。\n这是一个同学在新生群里的话，在这里引用出来：\n\n我感觉所有大学新生在来大学之前，需要学会抬头看路，社会现实是什么样的，行业现状是什么样的 自己的个人情况是什么样的，为了在社会站稳脚跟，必须要什么样的技能。\n如果说中学教育是纯粹的高考导向，一切规划都冲着高考去；那么从大学开始，没有人会再帮你规划你自己的人生了，需要你自己好好想想自己究竟要走一条什么样的道路。如果还是像高中一样随波逐流那就是寄。\n\n文末，我想用一句很有思政宣传风格的话作为结尾：“脚踏实地，仰望星空，我们的征途是星辰大海！”。希望大家都能在自己的人生新时期新阶段创造新成就新故事！\n其他参加西电那边的活动的时候，天公实在不作美，导致活动开始的有些晚。但总的来说还是很成功的。我们的问题根本上是过于仓促，沟通不到位，准备不充分导致的。其他的地方真的很成功，西电的学生真的很热情。另外，马上就要期末考试了，我在这里还是得立个flag:\n1. 每天还是要好好学习，玩游戏的时间不能超过一小时；\n2. 调整作息，十一点之前上床开始准备睡觉，即十一点半左右必须睡着，第二天早上七点半之前起床\n3. 加强锻炼，改善生活习惯，让自己更加自律，以期减轻体重，提升身体素质。\n\n结语总之，希望学弟学妹能够进入一个自己满意的大学与专业，度过快乐而充实的大学生活。希望自己能够改进生活习惯，让自己的生活更有质量。\n加油！\n","tags":["日记","随笔"]},{"title":"考试&宿舍智能化","url":"/2023/02/24/%E8%80%83%E8%AF%95-%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%85%B3%E7%81%AF/","content":"1 关于期末考试这两周一直在进行上学期没有进行的期末考试，有的科目发挥的还算可以，但有的不是很好，所以今天在此立下愿望，今后不能再摆烂了，争取下学期把成绩提上来，坚决不能挂科，争取成绩排到前列。\n另外，多学习一些喜欢的课外内容，把课余时间利用好，读读书看看网络上有用的东西，把学习课外的内容当作是娱乐。\n2 远程开关灯因为在B站上看到了这个视频 ，所以有了开始做宿舍远程开关灯的打算。\n目前经过前期的采购与准备，目前已经将程序烧录进去。剩下的问题有两个：一是舵机的力量较小，不容易进行操作；二是将舵机粘贴到开关附近。后期将会想办法解决这个问题。\n3 宿舍指纹锁因为之前在B站上看见过有大佬在宿舍门上做出了指纹开锁装置，想到我自己也会出现忘带钥匙等情况，所以就想动手尝试一下.具体原理和远程开关灯差不多，也是用ESP8266控制舵机操作。参考了以下几个教程\n\n100元制作宿舍指纹解锁门禁\n基于Arduino和AS608模块的指纹门禁锁–舵机控制\n0基础手把手教你弄寝室指纹识别开门装置（arduino uno,as608）\n\n","categories":["技术笔记"],"tags":["日记","电子","动手记录"]}]